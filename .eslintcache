[{"/Users/duytran/Documents/GitHub/trivuthesisclient/src/index.js":"1","/Users/duytran/Documents/GitHub/trivuthesisclient/src/reportWebVitals.js":"2","/Users/duytran/Documents/GitHub/trivuthesisclient/src/App.js":"3","/Users/duytran/Documents/GitHub/trivuthesisclient/src/components/StartComponent.js":"4","/Users/duytran/Documents/GitHub/trivuthesisclient/src/components/EditComponent.js":"5","/Users/duytran/Documents/GitHub/trivuthesisclient/src/components/HomeComponent.js":"6","/Users/duytran/Documents/GitHub/trivuthesisclient/src/components/BadgeListComponent.js":"7","/Users/duytran/Documents/GitHub/trivuthesisclient/src/components/TimeComponent.js":"8","/Users/duytran/Documents/GitHub/trivuthesisclient/src/components/RunningTitleComponent.js":"9","/Users/duytran/Documents/GitHub/trivuthesisclient/src/components/BadgeComponent.js":"10","/Users/duytran/Documents/GitHub/trivuthesisclient/src/components/Header.js":"11","/Users/duytran/Documents/GitHub/trivuthesisclient/src/components/ContactComponent.js":"12","/Users/duytran/Documents/GitHub/trivuthesisclient/src/components/AboutComponent.js":"13"},{"size":505,"mtime":1616943251770,"results":"14","hashOfConfig":"15"},{"size":362,"mtime":1607945934278,"results":"16","hashOfConfig":"15"},{"size":1251,"mtime":1617186170475,"results":"17","hashOfConfig":"15"},{"size":13333,"mtime":1616945006655,"results":"18","hashOfConfig":"15"},{"size":6033,"mtime":1611921603540,"results":"19","hashOfConfig":"15"},{"size":5632,"mtime":1617190049170,"results":"20","hashOfConfig":"15"},{"size":4603,"mtime":1616942639545,"results":"21","hashOfConfig":"15"},{"size":427,"mtime":1614156733673,"results":"22","hashOfConfig":"15"},{"size":283,"mtime":1615892436901,"results":"23","hashOfConfig":"15"},{"size":503,"mtime":1615537754321,"results":"24","hashOfConfig":"15"},{"size":660,"mtime":1617189881681,"results":"25","hashOfConfig":"15"},{"size":135,"mtime":1617185607953,"results":"26","hashOfConfig":"15"},{"size":6172,"mtime":1617275301578,"results":"27","hashOfConfig":"15"},{"filePath":"28","messages":"29","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},"1m2mmuv",{"filePath":"31","messages":"32","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"33","messages":"34","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"35","messages":"36","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"37","usedDeprecatedRules":"30"},{"filePath":"38","messages":"39","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"40","messages":"41","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"42","messages":"43","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"44","messages":"45","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"46","messages":"47","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"48","messages":"49","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"50","messages":"51","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"52","messages":"53","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"54","messages":"55","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/duytran/Documents/GitHub/trivuthesisclient/src/index.js",[],["56","57"],"/Users/duytran/Documents/GitHub/trivuthesisclient/src/reportWebVitals.js",[],"/Users/duytran/Documents/GitHub/trivuthesisclient/src/App.js",[],"/Users/duytran/Documents/GitHub/trivuthesisclient/src/components/StartComponent.js",["58"],"import React from 'react';\nimport BadgeListComponent from \"./BadgeListComponent\"\nimport TimeComponent from \"./TimeComponent\"\nimport RunningTitleComponent from \"./RunningTitleComponent\"\nimport ReactPlayer from 'react-player';\nimport Header from './Header'\n\nexport default class StartComponent extends React.Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            _isLoading: true,\n            time: 0,\n            badge: [],\n            questionData: [],\n            badgeData: [],\n            runningTitleData: '', // + Array(100).fill('\\xa0').join(''),\n            curID: -1,\n            forceUpdate: false,\n            curQuestion: {\n                \"id\": 0,\n                \"q\": \"Init\",\n                \"time\": 0,\n                \"a1\": null,\n                \"a2\": null,\n                \"a1Link\": null,\n                \"a2Link\": null,\n                \"nextQ\": 1,\n                \"badgeEarn\": [],\n                \"requiredBadge\": []\n            }\n        }\n    }\n\n    tick() {\n        this.setState(state => ({\n            time: state.time + 1\n        }))\n    }\n\n    componentDidMount() {\n        Promise.all([\n            fetch('badgedata.json'\n                , {\n                    headers: {\n                        'Content-Type': 'application/json',\n                        'Accept': 'application/json'\n                    }\n                })\n                .then(response => {\n                    if (response.ok) {\n                        return response.json();\n                    } else {\n                        const error = new Error(\"Error fetching data\");\n                        throw (error);\n                    }\n                })\n                .then(r => {\n                    console.log(r);\n                    this.setState({\n                        badgeData: r\n                    }, () => {\n                        this.updateBadge()\n                    });\n                }),\n\n            fetch('questiondata.json'\n                , {\n                    headers: {\n                        'Content-Type': 'application/json',\n                        'Accept': 'application/json'\n                    }\n                })\n                .then(response => {\n                    if (response.ok) {\n                        return response.json();\n                    } else {\n                        const error = new Error(\"Error fetching data\");\n                        throw (error);\n                    }\n                })\n                .then(r => {\n                    this.setState({\n                        questionData: r\n                    })\n                })\n                .then(() => {\n                    this.setState({\n                        curQuestion: this.addNewLineHTML(this.state.questionData[0]),\n                        curID: 0\n                    })\n                })\n                .then(() => this.updateBadge()),\n                \n                fetch('runningtitle.txt')\n                .then(t => t.text())\n                .then(t => this.setState({ runningTitleData: this.state.runningTitleData + t }))\n\n            // fetch('runningtitle.json'\n            //     , {\n            //         headers: {\n            //             'Content-Type': 'application/json',\n            //             'Accept': 'application/json'\n            //         }\n            //     })\n            //     .then(response => {\n            //         if(response.ok) {\n            //             return response.json();\n            //         } else {\n            //             throw(new Error(\"Error fetching running title json\"));\n            //         }\n            //     })\n            //     .then(r => this.setState({ runningTitleData: r }))\n        ])\n            .then(() =>\n                this.setState({\n                    _isLoading: false\n                }))\n\n    }\n\n    componentDidUpdate(prevProps, prevState, snapshot) {\n\n    }\n\n    addNewLineHTML = (questionData) => {\n        const finalText = (questionData.q.split('\\n')).map(str => <span><p>{str}</p><br/></span>);\n        console.log(`${finalText}`);\n        return {\n            ...questionData, \n            q: finalText,\n        }\n    }\n    \n\n    setTime = (newTime) => {\n        this.setState({\n            time: newTime\n        })\n    }\n\n    setBadge = newBadge => {\n        console.log(\"adding badge : \" + newBadge.name);\n        if (this.state.badge.findIndex(x => x.id === newBadge.id) === -1) {\n            this.setState(prevState => ({\n                badge: [...prevState.badge, newBadge]\n            }))\n        }\n    }\n\n    replaceBadge = (newBadge) => {\n        if (this.state.badge.findIndex(x => x.id === newBadge.id) === -1) {\n            const array = [...this.state.badge];\n            const oldBadge = this.state.badge.find(y => y.id === newBadge.upgrade);\n            if (oldBadge !== undefined) {\n                array.splice(this.state.badge.indexOf(oldBadge), 1);\n                this.setState({\n                    badge: array\n                })\n            }\n\n            this.setState(prevState => ({\n                badge: [...prevState.badge, newBadge]\n            }))\n        }\n    }\n\n    updateBadge() {\n        console.log(\"Called updateBadge\")\n        const earnedBadge = this.state.badgeData.find(b => this.state.curQuestion.badgeEarn.includes(b.id));\n        if (earnedBadge !== undefined) {\n            if (earnedBadge.upgrade !== null) {\n                this.replaceBadge(earnedBadge);\n            } else {\n                this.setBadge(earnedBadge)\n            }\n        }\n        console.log(\"Finished updateBadge\")\n    }\n\n    fetchQuestion = link => {\n        console.log(\"fetching question: \" + link)\n        const fetchedQ = this.state.questionData.find(x => x.id === link)\n        // this question does NOT require any badge\n        if (fetchedQ.requiredBadge.length === 0) {\n            this.setState({\n                curQuestion: this.addNewLineHTML(this.state.questionData.find(x => x.id === link))\n            }, () => {\n                this.updateBadge()\n            })\n            // this question requires some badges and player has it\n        } else if (fetchedQ.requiredBadge.every(b => b >= 0 && this.state.badge.find(x => b === x.id) !== undefined)) {\n            this.setState({\n                curQuestion: this.addNewLineHTML(this.state.questionData.find(x => x.id === link))\n            }, () => {\n                this.updateBadge()\n            })\n            // this question requires the absence of some badges\n        } else if (fetchedQ.requiredBadge.every(b => b < 0 && this.state.badge.find(x => (0 - b) === x.id) === undefined)) {\n            this.setState({\n                curQuestion: this.addNewLineHTML(this.state.questionData.find(x => x.id === link))\n            }, () => {\n                this.updateBadge()\n            })\n            // player does NOT have the required badge or absence of badge\n        } else {\n            if (fetchedQ.nextQ) {\n                this.fetchQuestion(fetchedQ.nextQ)\n            } else {\n                this.fetchQuestion(fetchedQ.a1Link)\n            }\n        }\n    }\n\n    answerHandler = (link) => {\n        this.setState({\n            forceUpdate: true\n        }, () => this.fetchQuestion(link))\n    }\n\n    handleReroute = (page) => this.props.history.push(`/${page}`);\n\n    turnOffForceUpdate = () => { this.setState({ forceUpdate: false }) }\n\n    restart = () => {\n        this.setState({\n            badge: [],\n            forceUpdate: true\n        }, () => {\n            this.fetchQuestion(0)\n        })\n    }\n\n    ref = player => {\n        this.player = player\n    }\n\n    render() {\n        return (\n            this.state._isLoading ?\n                <h1>Loading...</h1> :\n                <span>\n                    <div className=\"E-body\">\n                        <span className=\"row\">\n                            <span className=\"col-6\"/>\n                            <div className=\"col-6 d-flex justify-content-center\">\n                                <span className=\"E-viewport-wrapper\">\n                                    <ReactPlayer\n                                        ref={this.player}\n                                        className='react-player E-viewport'\n                                        url='https://www.youtube.com/watch?v=m6PGIto3FuI'\n                                        playing={true}\n                                        muted={true}\n                                        width= \"326px\"\n                                        height= \"760px\"\n                                        controls={false}\n                                        loop={true}\n                                    />\n                                </span>\n                            </div>\n                        </span>\n                        <span className=\"row E-content\">\n                            <span className=\"col-1\"/>\n                            <span className=\"col-5 p-0\">\n                                <RunningTitleComponent curTime={this.state.curQuestion.time} data={this.state.runningTitleData} />\n                            </span>\n                            <span className=\"col-6\"/>\n                            <span className=\"w-100\"/>\n                            <span className=\"col-1\"/>\n                            <span className=\"col-5 E-main-content\">\n                                <span className=\"row\">\n                                    <span className=\"col-3\">\n                                        <h6>TIME</h6>\n                                        <TimeComponent time={this.state.curQuestion.time} />\n                                    </span>\n                                    <span className=\"col-9\">\n                                        <h6>EVENTS</h6>\n                                        <div className=\"E-question\">{this.state.curQuestion.q}</div>\n                                    </span>\n                                </span>\n                            </span>\n\n                            <span className=\"col-6\">\n                            </span>\n                        </span>\n\n                        <span className=\"row\">\n                            <span className=\"col-1\" />\n                            <span className=\"col-5\" style={{padding: 0}}>\n                                <span className=\"row\">\n                                    <span className=\"col-3\"/>\n                                    <span className=\"col-9 answer-box-wrap\">\n                                    {\n                                        this.state.curQuestion.nextQ === null &&\n                                        this.state.curQuestion.id !== 2000 && \n                                        <span className=\"answer-box\"\n                                            onClick={() => this.answerHandler(this.state.curQuestion.a1Link)}>\n                                            {this.state.curQuestion.a1}\n                                        </span>\n                                    }\n                                    {\n                                        this.state.curQuestion.nextQ === null &&\n                                        this.state.curQuestion.id !== 2000 && \n                                        <span className=\"answer-box\"\n                                            onClick={() => this.answerHandler(this.state.curQuestion.a2Link)}>\n                                            {this.state.curQuestion.a2}\n                                        </span>\n                                    }\n                                    {\n                                        this.state.curQuestion.nextQ === null &&\n                                        this.state.curQuestion.id === 2000 &&\n                                        <span className=\"answer-box\"\n                                            onClick={() => this.restart()}>\n                                            {this.state.curQuestion.a1}\n                                        </span>\n                                    }\n                                    {\n                                        this.state.curQuestion.nextQ !== null &&\n                                        <span className=\"answer-box\"\n                                            onClick={() => this.fetchQuestion(this.state.curQuestion.nextQ)}>\n                                            NEXT\n                                        </span>\n                                    }\n                                    </span>\n                                </span>\n                            </span>\n                            <span className=\"col-6\" />\n                        </span>\n\n                        <footer className=\"fixed-bottom E-antiscrolling\">\n                            <BadgeListComponent\n                                forceUpdate={this.state.forceUpdate}\n                                turnOffForceUpdate={this.turnOffForceUpdate}\n                                curQuestion={this.state.curQuestion.id}\n                                questionEarn={this.state.curQuestion.id}\n                                badge={this.state.badge} />\n                        </footer>\n                    </div>\n                </span>\n                \n        )\n    }\n}","/Users/duytran/Documents/GitHub/trivuthesisclient/src/components/EditComponent.js",[],"/Users/duytran/Documents/GitHub/trivuthesisclient/src/components/HomeComponent.js",[],"/Users/duytran/Documents/GitHub/trivuthesisclient/src/components/BadgeListComponent.js",[],"/Users/duytran/Documents/GitHub/trivuthesisclient/src/components/TimeComponent.js",[],"/Users/duytran/Documents/GitHub/trivuthesisclient/src/components/RunningTitleComponent.js",[],"/Users/duytran/Documents/GitHub/trivuthesisclient/src/components/BadgeComponent.js",[],"/Users/duytran/Documents/GitHub/trivuthesisclient/src/components/Header.js",[],"/Users/duytran/Documents/GitHub/trivuthesisclient/src/components/ContactComponent.js",[],"/Users/duytran/Documents/GitHub/trivuthesisclient/src/components/AboutComponent.js",[],{"ruleId":"59","replacedBy":"60"},{"ruleId":"61","replacedBy":"62"},{"ruleId":"63","severity":1,"message":"64","line":6,"column":8,"nodeType":"65","messageId":"66","endLine":6,"endColumn":14},"no-native-reassign",["67"],"no-negated-in-lhs",["68"],"no-unused-vars","'Header' is defined but never used.","Identifier","unusedVar","no-global-assign","no-unsafe-negation"]